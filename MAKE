#!/usr/bin/runhaskell

import System.Environment
import System.Process
import System.Console.ANSI
import Data.List
import Data.Maybe

main = do
  args <- getArgs
  case args of
    ["buildAll"] -> buildAll
    ["dist"] -> dist
    _ -> putStrLn "argument not recognised."

dist = do
  env <- getEnvironment
  let pwd = fromJust $ lookup "PWD" env
  alert "DIST AAG" Red  
  callCommand $"scp -r ./dist/doc/html/AspectAG/*" ++
    " jpgarcia@salmon.fing.edu.uy:/ime/home02/jpgarcia/.WWW/AspectAG/AspectAG"
  alert "DIST POLYREC" Red  
  callCommand $ "scp -r ./lib/poly-rec/dist/doc/html/poly-rec/*" ++
    " jpgarcia@salmon.fing.edu.uy:/ime/home02/jpgarcia/.WWW/AspectAG/polyrec"
  alert "DIST REQUIRE" Red  
  callCommand $ "scp -r ./lib/require/dist/doc/html/require/*" ++
    " jpgarcia@salmon.fing.edu.uy:/ime/home02/jpgarcia/.WWW/AspectAG/require"

line = take 80 $ repeat '%'

buildAll = do
  env <- getEnvironment
  let pwd = fromJust $ lookup "PWD" env
  alert "BUILDING REQUIRE" Red
  callCommand $
    "cd " ++
    pwd ++ "/lib/require ; cabal install --force-reinstalls; cabal haddock"
  alert  "BUILDING POLYREC" Red
  callCommand $
    "cd " ++
    pwd ++ "/lib/poly-rec ; cabal install --force-reinstalls; cabal haddock"
  alert "BUILDING AAG" Red
  callCommand "cabal install; cabal haddock"

alert s c = do
  setSGR [SetColor Foreground Vivid c]
  putStrLn $ line ++ "\n" ++ s ++ "\n" ++ line
  setSGR [Reset]
